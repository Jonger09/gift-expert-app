{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifts.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","verifyDuplicated","find","category","toLowerCase","trim","length","className","type","value","onChange","target","GifGridItem","title","url","src","alt","getGifs","a","encodeURI","fetch","respuesta","json","data","gifs","map","gif","id","images","downsized","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifts","img","key","GiftExpertApp","ReactDOM","render","document","getElementById"],"mappings":"iOAKaA,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAAiB,EAGpBC,mBAAS,IAHW,mBAGlDC,EAHkD,KAGtCC,EAHsC,KA+B1D,OAEI,sBAAMC,SAvBa,SAAEC,GAErBA,EAAEC,iBAEF,IAAMC,EAAmBP,EAAWQ,MAAM,SAAAC,GAAQ,OAAIA,EAASC,gBAAkBR,EAAWQ,iBAGxFR,EAAWS,OAAOC,QAAU,GAAiC,qBAArBL,GAExCR,EAAc,CAAGG,EAAWQ,eAAf,mBAAiCV,KAE9CG,EAAc,KAIdA,EAAc,KAQlB,SAEI,uBAAOU,UAAU,aACbC,KAAK,OACLC,MAAQb,EACRc,SAjCW,SAAEX,GAErBF,EAAeE,EAAEY,OAAOF,a,OCPnBG,EAAc,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAElC,OAEI,sBAAKP,UAAU,gBAAf,UAEI,qBAAKQ,IAAMD,EAAME,IAAMH,IACvB,kCAAMA,EAAN,W,uBCVCI,EAAO,uCAAG,WAAOd,GAAP,uBAAAe,EAAA,4DAEJ,mCACTJ,EAHa,iDAGoCK,UAAWhB,GAH/C,oBAEJ,mCAFI,sBAIKiB,MAAON,GAJZ,cAIbO,EAJa,gBAKIA,EAAUC,OALd,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,IAC1B,MAAO,CACHC,GAAID,EAAIC,GACRd,MAAOa,EAAIb,MACXC,IAAG,UAAEY,EAAIE,cAAN,iBAAE,EAAYC,iBAAd,aAAE,EAAuBf,QAXjB,kBAgBZU,GAhBY,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAAe,ECFZ,SAAEA,GAAe,IAAD,EAEbR,mBAAS,CACjC4B,KAAM,GACNQ,SAAS,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBzC,OAjBAC,qBAAW,WAEPjB,EAASd,GACJgC,MAAM,SAAAX,GAAI,OAEPY,YAAY,WACRH,EAAS,CACLV,KAAMC,EACNO,SAAS,MAEd,UAIZ,CAAE5B,IAGE6B,EDpB2BK,CAAelC,GAAnCyB,EAHuB,EAG7BL,KAAcQ,EAHe,EAGfA,QAEtB,OAEI,qCACI,qBAAKxB,UAAU,qBAAf,SACI,qBAAIA,UAAU,mDAAd,cAAqEJ,EAArE,SAKA4B,GACI,iCACI,8CAKZ,qBAAKxB,UAAU,YAAf,SAIQqB,EAAOH,KAAK,SAAAa,GAAG,OACX,wBAAC,EAAD,2BACSA,GADT,IAEIC,IAAMD,EAAIX,eESvBa,EAtCO,WAAO,IAAD,EAEc7C,mBAAS,CAAE,iBAFzB,mBAEhBD,EAFgB,KAEJD,EAFI,KAWxB,OAEI,qCAEI,+CAGA,cAAC,EAAD,CAAaA,cAAgBA,EAAgBC,WAAaA,IAE1D,uBAGIA,EAAW+B,KAAK,SAAAtB,GAAQ,OACpB,cAAC,EAAD,CACIA,SAAWA,GACLA,U,YCvB9BsC,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4ffbcedc.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Se encargará de añadir una nueva categoria mediante un input\r\n\r\nexport const AddCategory = ({ setCategories, categories }) => {\r\n\r\n    // Estado de mi input\r\n    const [ inputValue, setInputValue ] = useState('');\r\n\r\n    const handleOnChange = ( e ) => {\r\n        // Cada que ingreso un nuevo valor al input, se actualiza el estado\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleOnSubmit = ( e ) => {\r\n        // Previene el comportamiento por defecto al hacer submit\r\n        e.preventDefault();\r\n        \r\n        const verifyDuplicated = categories.find( category => category.toLowerCase() === inputValue.toLowerCase() );\r\n\r\n        // Validación de mi inputValue y evitar categorias duplicadas\r\n        if( inputValue.trim().length >= 3 && typeof verifyDuplicated === 'undefined' ) {\r\n\r\n            setCategories( [ inputValue.toLowerCase(), ...categories ] );\r\n\r\n            setInputValue('');\r\n\r\n        } else {\r\n\r\n            setInputValue('');\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={ handleOnSubmit }>\r\n\r\n            <input className='hvr-shadow' \r\n                type='text'\r\n                value={ inputValue }\r\n                onChange={ handleOnChange }\r\n            />\r\n\r\n        </form>\r\n\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n    categories: PropTypes.array.isRequired\r\n}\r\n","import React from 'react'\r\n\r\n// Retorna cada url y titulo en un div, es decir, retornara 10 divs porque recibe 10\r\n// url y 10 titulos\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    return (\r\n\r\n        <div className='card hvr-grow' >\r\n\r\n            <img src={ url } alt={ title} />\r\n            <p> { title } </p>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n","\r\n// Petición http a la API\r\nexport const getGifs = async( category ) => {\r\n\r\n    const apiKey = 'cUIhsSWHdEefHwmQiMslzqgsUGlabs4J';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&api_key=${ apiKey }&limit=12`;\r\n    const respuesta = await fetch( url );\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map( gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.downsized?.url \r\n        }\r\n    })\r\n\r\n    // setImages( gifs );\r\n    return gifs;\r\n\r\n}\r\n","import { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifts } from '../hooks/useFetchGifts';\r\n\r\n// Se encargara de mostrar todas las categorias que tengo en un titulo h3 y posteriormente\r\n// iterar el objeto de la peticion a la API\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // Custom Hook\r\n    const { data: images, loading } = useFetchGifts( category );\r\n\r\n    return (\r\n\r\n        <>\r\n            <div className='categories--center'>\r\n                <h3 className='categories--capitalize hvr-underline-from-center' > { category } </h3>\r\n            </div>\r\n\r\n            { \r\n\r\n                loading &&\r\n                    <center>\r\n                        <p>Cargando...</p>\r\n                    </center>\r\n                \r\n            }\r\n\r\n            <div className='card-grid' >\r\n                \r\n\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            { ...img }\r\n                            key={ img.id }  \r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n\r\n}","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n// Custom Hook\r\nexport const useFetchGifts = ( category ) => {\r\n\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Se invoca getGifs cuando el componente es renderizado por primera vez\r\n    useEffect( () => {\r\n        // Mandamos como argumento nuestra Category y retorna una promesa\r\n        getGifs( category )\r\n            .then( gifs => \r\n\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data: gifs,\r\n                        loading: false\r\n                    }) \r\n                }, 1000)\r\n\r\n            )\r\n    \r\n    }, [ category ]);\r\n\r\n\r\n    return state; // { data: [], loading: true }\r\n\r\n}\r\n","import { useState } from 'react';\r\n\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GiftExpertApp = () => {\r\n\r\n    const [ categories, setCategories ] = useState([ 'wanda vision' ]);\r\n\r\n    /*\r\n    const handleAdd = () => {\r\n        setCategories( [ ...categories, 'WandaVision' ] )\r\n        // setCategories( category => [ ...category, 'WandaVision' ] );\r\n    }\r\n    */\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <h2>GiftExpertApp</h2>\r\n\r\n            {/* Comunicación entre componentes */}\r\n            <AddCategory setCategories={ setCategories } categories={ categories } />\r\n\r\n            <hr />\r\n\r\n            {\r\n                categories.map( category => (\r\n                    <GifGrid \r\n                        category={ category } \r\n                        key={ category } \r\n                    /> \r\n                ))\r\n            }\r\n\r\n\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default GiftExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GiftExpertApp from './GiftExpertApp.js';\n\nimport './css/index.css';\nimport './css/hover.css';\n\nReactDOM.render(\n\n  <GiftExpertApp />,\n  document.getElementById('root')\n\n);"],"sourceRoot":""}